ggboxplot(x = "fixations", y = "value",
color = "group", palette =c("#00AFBB", "#E7B800", "#FC4E07"),
add = "jitter", shape = "group") #+
#stat_compare_means()
plot.face.free_vs_mem
# Fixations Face in Free Viewing vs. Explicit Encoding
for (st in seq(5,16,4)) {
msd <- c(mean(df.w.et[df.w.et$group=="free",st]),sd(df.w.et[df.w.et$group=="free",st]),
mean(df.w.et[df.w.et$group=="mem",st]),sd(df.w.et[df.w.et$group=="mem",st]))
teststat <- t.test(df.w.et[,st] ~ df.w.et$group)
assign(paste0("ttest.",colnames(df.w.et)[st]), data.frame(M.free=msd[1],SD.free=msd[2], M.mem=msd[3], SD.mem=msd[4],  df=teststat$parameter, t=teststat$statistic, p=teststat$p.value))
assign(paste0("apa.ttest.",colnames(df.w.et)[st]), apa_print(t.test(df.w.et[,st] ~ df.w.et$group)))
}
rm(msd, teststat, st)
r_refs(file = "r-references.bib")
View(ttest.fixlat.face)
View(dscr.fix.rpl)
dscr.sac.rpl <- df.w.et %>%
group_by(group) %>%
summarise_at(vars(sac.pgaze:sac.bnongaze), funs(mean,sd,se=sd(.)/sqrt(n()))) %>% # mit den funs() die variablen vars(von:bis) berechnen
gather(key, measure, sac.pgaze_mean:sac.bnongaze_se) %>% # ins longformat
mutate(stat = as.factor(map(strsplit(key,"[[:punct:]]"), ~.x[3]) %>% unlist()),
area = map(strsplit(key,"[[:punct:]]"), ~.x[2]) %>% unlist(),
area = as.factor(substring(area,1,1)),
gazed = map(strsplit(key,"[[:punct:]]"), ~.x[2]) %>% unlist(),
gazed = as.factor(substring(gazed,2)),
#key = as.factor("replication")) %>% #rausnehmen, zur kontrolle, ob alles passt, was oben läuft.
select(-measure, everything()) %>% # neusortieren der variablen
select(key, everything())
dscr.sac.zwckl <- data.frame(key=c("zwickel","zwickel"),group=c("free", "free"),gazed=c("gaze", "gaze", "nongaze", "nongaze"),stat=c("mean", "se"),measure=c(.14,0.01,.09,0.01)) # free = person
dscr.sac.rpl <- df.w.et %>%
group_by(group) %>%
summarise_at(vars(sac.pgaze:sac.bnongaze), funs(mean,sd,se=sd(.)/sqrt(n()))) %>% # mit den funs() die variablen vars(von:bis) berechnen
gather(key, measure, sac.pgaze_mean:sac.bnongaze_se) %>% # ins longformat
mutate(stat = as.factor(map(strsplit(key,"[[:punct:]]"), ~.x[3]) %>% unlist()),
area = map(strsplit(key,"[[:punct:]]"), ~.x[2]) %>% unlist(),
area = as.factor(substring(area,1,1)),
gazed = map(strsplit(key,"[[:punct:]]"), ~.x[2]) %>% unlist(),
gazed = as.factor(substring(gazed,2)) %>%
#key = as.factor("replication")) %>% #rausnehmen, zur kontrolle, ob alles passt, was oben läuft.
select(-measure, everything()) %>% # neusortieren der variablen
select(key, everything())
dscr.sac.zwckl <- data.frame(key=c("zwickel","zwickel"),group=c("free", "free"),gazed=c("gaze", "gaze", "nongaze", "nongaze"),stat=c("mean", "se"),measure=c(.14,0.01,.09,0.01)) # free = person
dscr.sac.rpl <- df.w.et %>%
group_by(group) %>%
summarise_at(vars(sac.pgaze:sac.bnongaze), funs(mean,sd,se=sd(.)/sqrt(n()))) %>% # mit den funs() die variablen vars(von:bis) berechnen
gather(key, measure, sac.pgaze_mean:sac.bnongaze_se) %>% # ins longformat
mutate(stat = as.factor(map(strsplit(key,"[[:punct:]]"), ~.x[3]) %>% unlist()),
area = map(strsplit(key,"[[:punct:]]"), ~.x[2]) %>% unlist(),
area = as.factor(substring(area,1,1)),
gazed = map(strsplit(key,"[[:punct:]]"), ~.x[2]) %>% unlist(),
gazed = as.factor(substring(gazed,2))) %>%
#key = as.factor("replication")) %>% #rausnehmen, zur kontrolle, ob alles passt, was oben läuft.
select(-measure, everything()) %>% # neusortieren der variablen
select(key, everything())
dscr.sac.zwckl <- data.frame(key=c("zwickel","zwickel"),group=c("free", "free"),gazed=c("gaze", "gaze", "nongaze", "nongaze"),stat=c("mean", "se"),measure=c(.14,0.01,.09,0.01)) # free = person
View(dscr.sac.rpl)
dscr.sac.rpl <- df.w.et %>%
group_by(group) %>%
summarise_at(vars(sac.pgaze:sac.bnongaze), funs(mean,sd,se=sd(.)/sqrt(n()))) %>% # mit den funs() die variablen vars(von:bis) berechnen
gather(key, measure, sac.pgaze_mean:sac.bnongaze_se) %>% # ins longformat
mutate(stat = as.factor(map(strsplit(key,"[[:punct:]]"), ~.x[3]) %>% unlist()),
area = map(strsplit(key,"[[:punct:]]"), ~.x[2]) %>% unlist(),
area = as.factor(substring(area,1,1)),
gazed = map(strsplit(key,"[[:punct:]]"), ~.x[2]) %>% unlist(),
gazed = as.factor(substring(gazed,2))) %>%
#key = as.factor("replication")) %>% #rausnehmen, zur kontrolle, ob alles passt, was oben läuft.
select(-measure, everything()) %>% # neusortieren der variablen
select(key, everything())
dscr.sac.zwckl <- data.frame(key=c("zwickel","zwickel"),group=c("free", "free"),gazed=c("gaze", "gaze", "nongaze", "nongaze"),stat=c("mean", "se"),measure=c(.14,0.01,.09,0.01)) # free = person
View(dscr.sac.rpl)
dscr.sac.rpl <- df.w.et %>%
group_by(group) %>%
summarise_at(vars(sac.pgaze:sac.bnongaze), funs(mean,sd,se=sd(.)/sqrt(n()))) %>% # mit den funs() die variablen vars(von:bis) berechnen
gather(key, measure, sac.pgaze_mean:sac.bnongaze_se) %>% # ins longformat
mutate(stat = as.factor(map(strsplit(key,"[[:punct:]]"), ~.x[3]) %>% unlist()),
area = map(strsplit(key,"[[:punct:]]"), ~.x[2]) %>% unlist(),
area = as.factor(substring(area,1,1)),
gazed = map(strsplit(key,"[[:punct:]]"), ~.x[2]) %>% unlist(),
gazed = as.factor(substring(gazed,2))) %>%
#key = as.factor("replication")) %>% #rausnehmen, zur kontrolle, ob alles passt, was oben läuft.
select(-measure, everything()) %>% # neusortieren der variablen
select(everything())
View(dscr.sac.rpl)
dscr.sac.rpl <- df.w.et %>%
group_by(group) %>%
summarise_at(vars(sac.pgaze:sac.bnongaze), funs(mean,sd,se=sd(.)/sqrt(n()))) %>% # mit den funs() die variablen vars(von:bis) berechnen
gather(key, measure, sac.pgaze_mean:sac.bnongaze_se) %>% # ins longformat
mutate(stat = as.factor(map(strsplit(key,"[[:punct:]]"), ~.x[3]) %>% unlist()),
area = map(strsplit(key,"[[:punct:]]"), ~.x[2]) %>% unlist(),
area = as.factor(substring(area,1,1)),
gazed = map(strsplit(key,"[[:punct:]]"), ~.x[2]) %>% unlist(),
gazed = as.factor(substring(gazed,2)),
key = as.factor("replication")) %>% #rausnehmen, zur kontrolle, ob alles passt, was oben läuft.
select(-measure, everything()) %>% # neusortieren der variablen
select(key, everything())
View(dscr.sac.rpl)
dscr.fix.rpl <- df.w.et %>%
group_by(group) %>%
summarise_at(vars(fix.face:fixlat.nongaze), funs(mean,sd,se=sd(.)/sqrt(n()))) %>% # mit den funs() die variablen vars(von:bis) berechnen
gather(key, measure, fix.face_mean:fixlat.nongaze_se) %>% # ins longformat
mutate(fix = as.factor(map(strsplit(key,"[[:punct:]]"), ~.x[1]) %>% unlist()),
gazed = map(strsplit(key,"[[:punct:]]"), ~.x[2]) %>% unlist(),
gazed = as.factor(substring(gazed,1)),
stat = as.factor(map(strsplit(key,"[[:punct:]]"), ~.x[3]) %>% unlist()),
key = as.factor("replication")) %>% #
select(-measure, everything()) %>% # neusortieren der variablen
select(key, everything())
View(dscr.fix.rpl)
View(dscr.fixsoc)
View(dscr.fixsoc.group)
View(dscr.fixsoc)
View(dscr.fixsoc.group)
library("papaja")
library("tidyverse")
library("car")
library("afex")
library("ggpubr")
rm(list=ls())
pathMEM <- "../01_data/Memory/"
pathET <- "../01_data/prot/"
pathFB <- "../01_data/FB/"
# ALL EYE TRACKING DATA
vpn <- paste0("vpja",ifelse(c(1:78,81:96)<10,"0",""),c(1:78,81:96))
bed <- rep(c("free","mem"),47)
# ORIGINALLY ACQUIRED DATA
#vpn <- paste0("vpja",ifelse(c(1:78)<10,"0",""),c(1:78))
#bed <- rep(c("free","mem"),39)
bed <- bed[!(vpn %in% "vpja23")]  # missing data
vpn <- vpn[!(vpn %in% "vpja23")]
# Loop over subjects
erg <- numeric(); nvalid <- numeric(); cleantime <- numeric()
for (vp in vpn) {
#  print(vp)
prot <- read.csv2(paste0(pathET,vp,"_Fixations.csv"))
# Restrict to trials with valid baseline?
nvalid <- c(nvalid,sum(prot$blok==1))
prot <- prot[prot$blok==1,]
cleantime <- c(cleantime,mean(prot$cleantime))
erg <- rbind(erg,apply(prot[,8:ncol(prot)],2,mean,na.rm=TRUE))
}
df.w.et <- data.frame(code=vpn,group=bed,nvalid,cleantime,erg)
df.l.et <- gather(df.w.et, key, value, fix.face:sac.bnongaze, factor_key=TRUE) %>%
mutate(
key = as.character(key),
fixations =
as.factor(
ifelse(startsWith(key, "fix."), "fix",
ifelse(startsWith(key, "fixn."), "fixn",
ifelse(startsWith(key, "fixlat."), "fixlat",
ifelse(startsWith(key, "sac."), "sac", NA))))),
region =
as.factor(
ifelse(endsWith(key, ".face"), "face",
ifelse(endsWith(key, ".body"), "body",
ifelse(endsWith(key, ".gaze"), "gaze",
ifelse(endsWith(key, ".nongaze"), "nongaze",
ifelse(endsWith(key, ".pgaze"), "pgaze",
ifelse(endsWith(key, ".fgaze"), "fgaze",
ifelse(endsWith(key, ".bgaze"), "bgaze",
ifelse(endsWith(key, ".pnongaze"), "pnongaze",
ifelse(endsWith(key, ".fnongaze"), "fnongaze",
ifelse(endsWith(key, ".bnongaze"), "bnongaze",NA)))))))))))) %>%
arrange(code)
rm(prot, bed, cleantime, nvalid, vp, vpn, erg)
# ALL MEMORY DATA
vpn <- paste0("vpja",ifelse(c(1:78,81:96)<10,"0",""),c(1:78,81:96))
bed <- rep(c("free","mem"),47)
# ORIGINALLY ACQUIRED DATA
#vpn <- pasteo("vpja",ifelse(c(1:78)<10,"0",""),c(1:78))
#bed <- rep(c("free","mem"),39)
# Loop over subjects
erg <- numeric()
for (vp in vpn) {
# print(vp)
prot <- read.csv2(paste0(pathMEM,vp,".csv"))
# Item recalled
gaze <- sum(prot$memgazedat)
nogaze <- sum(prot$memnongazedat)
erg <- rbind(erg,c(gaze,nogaze))
}
df.w.mem <- data.frame(code=vpn,bed,erg)
names(df.w.mem) <- c("code","bed","memgaze","memnogaze")
rm(gaze, nogaze, erg, prot, bed, vp, vpn)
df.w.demo <- read_csv2(paste0(pathFB,"Projektarbeit_Dateneingabemaske.csv")) %>%
transmute(
vp = as.factor(VP_Nr),
sex = as.factor(Demo_Sex),
age = Demo_Alter,
aq_social = ifelse((5-AQK_1) < 3, 1, 0) + ifelse((5-AQK_7) < 3, 1, 0) + ifelse(AQK_8 < 3, 1, 0) + ifelse((5-AQK_10) < 3, 1, 0) + ifelse((5-AQK_11) < 3, 1, 0) + ifelse(AQK_13 < 3, 1, 0) + ifelse((5-AQK_14) < 3, 1, 0) + ifelse((5-AQK_20) < 3, 1, 0) + ifelse((5-AQK_24) < 3, 1, 0) + ifelse((5-AQK_28) < 3, 1, 0) + ifelse((5-AQK_31) < 3, 1, 0), # 5- 'item' for reversed items, then if 1/2 -> 1, 3/4 -> 0
aq_imagination = ifelse((5-AQK_3) < 3, 1, 0) + ifelse((5-AQK_5) < 3, 1, 0) + ifelse((5-AQK_6) < 3, 1, 0) + ifelse((5-AQK_9) < 3, 1, 0) + ifelse((5-AQK_16) < 3, 1, 0) + ifelse((5-AQK_17) < 3, 1, 0) + ifelse((5-AQK_18) < 3, 1, 0) + ifelse((5-AQK_22) < 3, 1, 0) + ifelse((5-AQK_23) < 3, 1, 0) + ifelse((5-AQK_26) < 3, 1, 0) + ifelse((5-AQK_32) < 3, 1, 0) + ifelse((5-AQK_33) < 3, 1, 0),
aq_communication = ifelse(AQK_2 < 3, 1, 0) + ifelse(AQK_4 < 3, 1, 0) + ifelse(AQK_12 < 3, 1, 0) + ifelse(AQK_15 < 3, 1, 0) + ifelse(AQK_19 < 3, 1, 0) + ifelse(AQK_21 < 3, 1, 0) + ifelse(AQK_25 < 3, 1, 0) + ifelse(AQK_27 < 3, 1, 0) + ifelse(AQK_29 < 3, 1, 0) + ifelse(AQK_30 < 3, 1, 0),
aq_sumscore = ifelse((5-AQK_1) < 3, 1, 0) + ifelse(AQK_2 < 3, 1, 0) + ifelse((5-AQK_3) < 3, 1, 0) + ifelse(AQK_4 < 3, 1, 0) + ifelse((5-AQK_5) < 3, 1, 0) + ifelse((5-AQK_6) < 3, 1, 0) + ifelse((5-AQK_7) < 3, 1, 0) + ifelse(AQK_8 < 3, 1, 0) + ifelse((5-AQK_9) < 3, 1, 0) + ifelse((5-AQK_10) < 3, 1, 0) + ifelse((5-AQK_11) < 3, 1, 0) + ifelse(AQK_12 < 3, 1, 0) + ifelse(AQK_13 < 3, 1, 0) + ifelse((5-AQK_14) < 3, 1, 0) + ifelse(AQK_15 < 3, 1, 0) + ifelse((5-AQK_16) < 3, 1, 0) + ifelse((5-AQK_17) < 3, 1, 0) + ifelse((5-AQK_18) < 3, 1, 0) + ifelse(AQK_19 < 3, 1, 0) + ifelse((5-AQK_20) < 3, 1, 0) + ifelse(AQK_21 < 3, 1, 0) + ifelse((5-AQK_22) < 3, 1, 0) + ifelse((5-AQK_23) < 3, 1, 0) + ifelse((5-AQK_24) < 3, 1, 0) + ifelse(AQK_25 < 3, 1, 0) + ifelse((5-AQK_26) < 3, 1, 0) + ifelse(AQK_27 < 3, 1, 0) + ifelse((5-AQK_28) < 3, 1, 0) + ifelse(AQK_29 < 3, 1, 0) + ifelse(AQK_30 < 3, 1, 0) + ifelse((5-AQK_31) < 3, 1, 0) + ifelse((5-AQK_32) < 3, 1, 0) + ifelse((5-AQK_33) < 3, 1, 0))
# Descriptives for fixation chacracteristics for joint attention
dscr.fix.rpl <- df.w.et %>%
group_by(group) %>%
summarise_at(vars(fix.face:fixlat.nongaze), funs(mean,sd,se=sd(.)/sqrt(n()))) %>% # mit den funs() die variablen vars(von:bis) berechnen
gather(key, measure, fix.face_mean:fixlat.nongaze_se) %>% # ins longformat
mutate(fix = as.factor(map(strsplit(key,"[[:punct:]]"), ~.x[1]) %>% unlist()),
gazed = map(strsplit(key,"[[:punct:]]"), ~.x[2]) %>% unlist(),
gazed = as.factor(substring(gazed,1)),
stat = as.factor(map(strsplit(key,"[[:punct:]]"), ~.x[3]) %>% unlist()),
key = as.factor("replication")) %>% #
select(-measure, everything()) %>% # neusortieren der variablen
select(key, everything())
dscr.fix.rpl$gazed <- factor(dscr.fix.rpl$gazed, levels=c("face", "body", "gaze", "nongaze"))
dscr.fix.zwckl <- data.frame(group="free",fix=c("fix","fix","fix","fix","fixn","fixn","fixn","fixn","fixlat","fixlat","fixlat","fixlat"), gazed=c("gaze","gaze", "nongaze", "nongaze"), stat=c("mean","se"), measure=c(0.08,.01,.07,.01,5.89,.37,5.24,.34,3588,133,4008,166)) # free = person
# ANOVA Fixations characteristics for joint attention
## 2 (Group) x 2 (Gaze) ANOVA
icond <- gl(2,1,labels=c("cued","uncued")) # within-factor
idata <- data.frame(icond)
for (st in seq(7,16,4)) { # Variables 7:16, every 4th: fix.gaze and fix.nogaze; fixn.gaze and ...
carmod <- lm(as.matrix(df.w.et[,st:(st+1)]) ~ df.w.et$group)
#print(colnames(df.w.et[,st:(st+1)]))
#print(Anova(carmod, idata=idata, idesign=~icond, type="III"))
assign(paste0("anova.",colnames(df.w.et)[st]), Anova(carmod, idata=idata, idesign=~icond, type="III"))
assign(paste0("apa.anova.",colnames(df.w.et)[st]), apa_print(Anova(carmod, idata=idata, idesign=~icond, type="III"), correction="GG", mse = FALSE))
}
rm(carmod, idata, icond, st)
dscr.sac.rpl <- df.w.et %>%
group_by(group) %>%
summarise_at(vars(sac.pgaze:sac.bnongaze), funs(mean,sd,se=sd(.)/sqrt(n()))) %>% # mit den funs() die variablen vars(von:bis) berechnen
gather(key, measure, sac.pgaze_mean:sac.bnongaze_se) %>% # ins longformat
mutate(stat = as.factor(map(strsplit(key,"[[:punct:]]"), ~.x[3]) %>% unlist()),
area = map(strsplit(key,"[[:punct:]]"), ~.x[2]) %>% unlist(),
area = as.factor(substring(area,1,1)),
gazed = map(strsplit(key,"[[:punct:]]"), ~.x[2]) %>% unlist(),
gazed = as.factor(substring(gazed,2)),
key = as.factor("replication")) %>% #rausnehmen, zur kontrolle, ob alles passt, was oben läuft.
select(-measure, everything()) %>% # neusortieren der variablen
select(key, everything())
dscr.sac.zwckl <- data.frame(key=c("zwickel","zwickel"),group=c("free", "free"),gazed=c("gaze", "gaze", "nongaze", "nongaze"),stat=c("mean", "se"),measure=c(.14,0.01,.09,0.01)) # free = person
# Plots: Saccade data
farben <- c("blue","yellow")
ttxt <- c("Person","Face","Body")
for (i in 1:3) {
st <- (17:19)[i]
# Fixation density
m  <- cbind(apply(df.w.et[df.w.et$group=="free",c(st,st+3)],2,mean),
apply(df.w.et[df.w.et$group=="mem",c(st,st+3)],2,mean))
se <- cbind(apply(df.w.et[df.w.et$group=="free",c(st,st+3)],2,sd)/sqrt(sum(df.w.et$group=="free")),
apply(df.w.et[df.w.et$group=="mem",c(st,st+3)],2,sd)/sqrt(sum(df.w.et$group=="mem")))
yrng <- c(0,max(m+se))
x <- barplot(m,beside=TRUE,col=farben,ylim=yrng,xlab="",ylab="% of total fixation time")
arrows(x,m-se,x,m+se,length=0.03,angle=90,code=3,col="black")
axis(1,apply(x,2,mean),c("Free viewing","Explicit encoding"),tick=FALSE)
title(ttxt[i])
}
legend(max(x),max(yrng),c("Cued","Uncued"),fill=farben,xjust=1,yjust=1)
rm(m, se, yrng, x, st, farben, ttxt, i)
# ANOVA Saccades
## 2 (Group) x 2 (Gaze) ANOVA
icond <- gl(2,1,labels=c("cued","uncued")) # within-factor
idata <- data.frame(icond)
for (st in 17:19) {
carmod <- lm(as.matrix(df.w.et[,c(st,(st+3))]) ~ df.w.et$group)
#print(colnames(df.w.et[,c(st,(st+3))]))
#print(Anova(carmod, idata=idata, idesign=~icond, type="III"))
assign(paste0("anova.",colnames(df.w.et)[st]), Anova(carmod, idata=idata, idesign=~icond, type="III"))
assign(paste0("apa.anova.",colnames(df.w.et)[st]), apa_print(Anova(carmod, idata=idata, idesign=~icond, type="III"), correction="GG", mse = FALSE))
}
rm(carmod, idata, icond, st)
# Recalled items
# 2 (Condition) x 2 (Gaze) ANOVA (auf erinnerte Details)
imem <- gl(2,1,labels=c("cued","uncued"))
idata <- data.frame(imem)
# Car
carmod <- lm(as.matrix(df.w.mem[,3:4]) ~ df.w.mem$bed)
# print(colnames(df.w.mem[c(3,4)]))
#print(Anova(carmod, idata=idata, idesign=~imem, type="III"))
anova.mem <- Anova(carmod, idata=idata, idesign=~imem, type="III")
apa.anova.mem <- apa_print(Anova(carmod, idata=idata, idesign=~imem, type="III"), correction="GG", mse = FALSE)
dscr.mem <- df.w.mem %>% summarise(mean(memgaze), sd(memgaze), mean(memnogaze), sd(memnogaze))
dscr.mem.group <- df.w.mem %>% group_by(bed) %>% summarise(mean(memgaze), sd(memgaze), mean(memnogaze), sd(memnogaze))
rm(imem, idata, carmod)
# Descriptives for fixation chacracteristics for social attention
dscr.fixsoc <- df.w.et %>% summarise(mean(fix.face), sd(fix.face), mean(fix.body), sd(fix.body), mean(fixn.face), sd(fixn.face), mean(fixn.body), sd(fixn.body), mean(fixlat.face), sd(fixlat.face), mean(fixlat.body), sd(fixlat.body))
dscr.fixsoc.group <- df.w.et %>% group_by(group) %>% summarise(mean(fix.face), sd(fix.face), mean(fix.body), sd(fix.body), mean(fixn.face), sd(fixn.face), mean(fixn.body), sd(fixn.body), mean(fixlat.face), sd(fixlat.face), mean(fixlat.body), sd(fixlat.body))
# ANOVA Fixations characteristics
## 2 (Group) x 2 (Face/Body) ANOVA
icond <- gl(2,1,labels=c("head","body")) # within-factor
idata <- data.frame(icond)
for (st in seq(5,16,4)) { # Variables 5:16, every 4th: fix.face and fix.noface; fixn.face and ...
carmod <- lm(as.matrix(df.w.et[,st:(st+1)]) ~ df.w.et$group)
#print(Anova(carmod, idata=idata, idesign=~icond, type="III"))
assign(paste0("anova.",colnames(df.w.et)[st]), Anova(carmod, idata=idata, idesign=~icond, type="III"))
assign(paste0("apa.anova.",colnames(df.w.et)[st]), apa_print(Anova(carmod, idata=idata, idesign=~icond, type="III"), correction="GG", mse = FALSE))
}
rm(carmod, idata, icond, st)
# plots
plot.face.free_vs_mem <- df.l.et %>%
filter(fixations=="fix" & region=="face") %>%
ggboxplot(x = "fixations", y = "value",
color = "group", palette =c("#00AFBB", "#E7B800", "#FC4E07"),
add = "jitter", shape = "group") #+
#stat_compare_means()
plot.face.free_vs_mem
# Fixations Face in Free Viewing vs. Explicit Encoding
for (st in seq(5,16,4)) {
msd <- c(mean(df.w.et[df.w.et$group=="free",st]),sd(df.w.et[df.w.et$group=="free",st]),
mean(df.w.et[df.w.et$group=="mem",st]),sd(df.w.et[df.w.et$group=="mem",st]))
teststat <- t.test(df.w.et[,st] ~ df.w.et$group)
assign(paste0("ttest.",colnames(df.w.et)[st]), data.frame(M.free=msd[1],SD.free=msd[2], M.mem=msd[3], SD.mem=msd[4],  df=teststat$parameter, t=teststat$statistic, p=teststat$p.value))
assign(paste0("apa.ttest.",colnames(df.w.et)[st]), apa_print(t.test(df.w.et[,st] ~ df.w.et$group)))
}
rm(msd, teststat, st)
r_refs(file = "r-references.bib")
# plots
plot.face.free_vs_mem <- df.l.et %>%
filter(fixations=="fix" & region=="face") %>%
ggboxplot(x = "fixations", y = "value",
fill = "group", palette =c("#00AFBB", "#E7B800", "#FC4E07"),
add = "jitter", shape = "group") #+
library("papaja")
library("tidyverse")
library("car")
library("afex")
library("ggpubr")
rm(list=ls())
pathMEM <- "../01_data/Memory/"
pathET <- "../01_data/prot/"
pathFB <- "../01_data/FB/"
# ALL EYE TRACKING DATA
vpn <- paste0("vpja",ifelse(c(1:78,81:96)<10,"0",""),c(1:78,81:96))
bed <- rep(c("free","mem"),47)
# ORIGINALLY ACQUIRED DATA
#vpn <- paste0("vpja",ifelse(c(1:78)<10,"0",""),c(1:78))
#bed <- rep(c("free","mem"),39)
bed <- bed[!(vpn %in% "vpja23")]  # missing data
vpn <- vpn[!(vpn %in% "vpja23")]
# Loop over subjects
erg <- numeric(); nvalid <- numeric(); cleantime <- numeric()
for (vp in vpn) {
#  print(vp)
prot <- read.csv2(paste0(pathET,vp,"_Fixations.csv"))
# Restrict to trials with valid baseline?
nvalid <- c(nvalid,sum(prot$blok==1))
prot <- prot[prot$blok==1,]
cleantime <- c(cleantime,mean(prot$cleantime))
erg <- rbind(erg,apply(prot[,8:ncol(prot)],2,mean,na.rm=TRUE))
}
df.w.et <- data.frame(code=vpn,group=bed,nvalid,cleantime,erg)
df.l.et <- gather(df.w.et, key, value, fix.face:sac.bnongaze, factor_key=TRUE) %>%
mutate(
key = as.character(key),
fixations =
as.factor(
ifelse(startsWith(key, "fix."), "fix",
ifelse(startsWith(key, "fixn."), "fixn",
ifelse(startsWith(key, "fixlat."), "fixlat",
ifelse(startsWith(key, "sac."), "sac", NA))))),
region =
as.factor(
ifelse(endsWith(key, ".face"), "face",
ifelse(endsWith(key, ".body"), "body",
ifelse(endsWith(key, ".gaze"), "gaze",
ifelse(endsWith(key, ".nongaze"), "nongaze",
ifelse(endsWith(key, ".pgaze"), "pgaze",
ifelse(endsWith(key, ".fgaze"), "fgaze",
ifelse(endsWith(key, ".bgaze"), "bgaze",
ifelse(endsWith(key, ".pnongaze"), "pnongaze",
ifelse(endsWith(key, ".fnongaze"), "fnongaze",
ifelse(endsWith(key, ".bnongaze"), "bnongaze",NA)))))))))))) %>%
arrange(code)
rm(prot, bed, cleantime, nvalid, vp, vpn, erg)
# ALL MEMORY DATA
vpn <- paste0("vpja",ifelse(c(1:78,81:96)<10,"0",""),c(1:78,81:96))
bed <- rep(c("free","mem"),47)
# ORIGINALLY ACQUIRED DATA
#vpn <- pasteo("vpja",ifelse(c(1:78)<10,"0",""),c(1:78))
#bed <- rep(c("free","mem"),39)
# Loop over subjects
erg <- numeric()
for (vp in vpn) {
# print(vp)
prot <- read.csv2(paste0(pathMEM,vp,".csv"))
# Item recalled
gaze <- sum(prot$memgazedat)
nogaze <- sum(prot$memnongazedat)
erg <- rbind(erg,c(gaze,nogaze))
}
df.w.mem <- data.frame(code=vpn,bed,erg)
names(df.w.mem) <- c("code","bed","memgaze","memnogaze")
rm(gaze, nogaze, erg, prot, bed, vp, vpn)
df.w.demo <- read_csv2(paste0(pathFB,"Projektarbeit_Dateneingabemaske.csv")) %>%
transmute(
vp = as.factor(VP_Nr),
sex = as.factor(Demo_Sex),
age = Demo_Alter,
aq_social = ifelse((5-AQK_1) < 3, 1, 0) + ifelse((5-AQK_7) < 3, 1, 0) + ifelse(AQK_8 < 3, 1, 0) + ifelse((5-AQK_10) < 3, 1, 0) + ifelse((5-AQK_11) < 3, 1, 0) + ifelse(AQK_13 < 3, 1, 0) + ifelse((5-AQK_14) < 3, 1, 0) + ifelse((5-AQK_20) < 3, 1, 0) + ifelse((5-AQK_24) < 3, 1, 0) + ifelse((5-AQK_28) < 3, 1, 0) + ifelse((5-AQK_31) < 3, 1, 0), # 5- 'item' for reversed items, then if 1/2 -> 1, 3/4 -> 0
aq_imagination = ifelse((5-AQK_3) < 3, 1, 0) + ifelse((5-AQK_5) < 3, 1, 0) + ifelse((5-AQK_6) < 3, 1, 0) + ifelse((5-AQK_9) < 3, 1, 0) + ifelse((5-AQK_16) < 3, 1, 0) + ifelse((5-AQK_17) < 3, 1, 0) + ifelse((5-AQK_18) < 3, 1, 0) + ifelse((5-AQK_22) < 3, 1, 0) + ifelse((5-AQK_23) < 3, 1, 0) + ifelse((5-AQK_26) < 3, 1, 0) + ifelse((5-AQK_32) < 3, 1, 0) + ifelse((5-AQK_33) < 3, 1, 0),
aq_communication = ifelse(AQK_2 < 3, 1, 0) + ifelse(AQK_4 < 3, 1, 0) + ifelse(AQK_12 < 3, 1, 0) + ifelse(AQK_15 < 3, 1, 0) + ifelse(AQK_19 < 3, 1, 0) + ifelse(AQK_21 < 3, 1, 0) + ifelse(AQK_25 < 3, 1, 0) + ifelse(AQK_27 < 3, 1, 0) + ifelse(AQK_29 < 3, 1, 0) + ifelse(AQK_30 < 3, 1, 0),
aq_sumscore = ifelse((5-AQK_1) < 3, 1, 0) + ifelse(AQK_2 < 3, 1, 0) + ifelse((5-AQK_3) < 3, 1, 0) + ifelse(AQK_4 < 3, 1, 0) + ifelse((5-AQK_5) < 3, 1, 0) + ifelse((5-AQK_6) < 3, 1, 0) + ifelse((5-AQK_7) < 3, 1, 0) + ifelse(AQK_8 < 3, 1, 0) + ifelse((5-AQK_9) < 3, 1, 0) + ifelse((5-AQK_10) < 3, 1, 0) + ifelse((5-AQK_11) < 3, 1, 0) + ifelse(AQK_12 < 3, 1, 0) + ifelse(AQK_13 < 3, 1, 0) + ifelse((5-AQK_14) < 3, 1, 0) + ifelse(AQK_15 < 3, 1, 0) + ifelse((5-AQK_16) < 3, 1, 0) + ifelse((5-AQK_17) < 3, 1, 0) + ifelse((5-AQK_18) < 3, 1, 0) + ifelse(AQK_19 < 3, 1, 0) + ifelse((5-AQK_20) < 3, 1, 0) + ifelse(AQK_21 < 3, 1, 0) + ifelse((5-AQK_22) < 3, 1, 0) + ifelse((5-AQK_23) < 3, 1, 0) + ifelse((5-AQK_24) < 3, 1, 0) + ifelse(AQK_25 < 3, 1, 0) + ifelse((5-AQK_26) < 3, 1, 0) + ifelse(AQK_27 < 3, 1, 0) + ifelse((5-AQK_28) < 3, 1, 0) + ifelse(AQK_29 < 3, 1, 0) + ifelse(AQK_30 < 3, 1, 0) + ifelse((5-AQK_31) < 3, 1, 0) + ifelse((5-AQK_32) < 3, 1, 0) + ifelse((5-AQK_33) < 3, 1, 0))
# Descriptives for fixation chacracteristics for joint attention
dscr.fix.rpl <- df.w.et %>%
group_by(group) %>%
summarise_at(vars(fix.face:fixlat.nongaze), funs(mean,sd,se=sd(.)/sqrt(n()))) %>% # mit den funs() die variablen vars(von:bis) berechnen
gather(key, measure, fix.face_mean:fixlat.nongaze_se) %>% # ins longformat
mutate(fix = as.factor(map(strsplit(key,"[[:punct:]]"), ~.x[1]) %>% unlist()),
gazed = map(strsplit(key,"[[:punct:]]"), ~.x[2]) %>% unlist(),
gazed = as.factor(substring(gazed,1)),
stat = as.factor(map(strsplit(key,"[[:punct:]]"), ~.x[3]) %>% unlist()),
key = as.factor("replication")) %>% #
select(-measure, everything()) %>% # neusortieren der variablen
select(key, everything())
dscr.fix.rpl$gazed <- factor(dscr.fix.rpl$gazed, levels=c("face", "body", "gaze", "nongaze"))
dscr.fix.zwckl <- data.frame(group="free",fix=c("fix","fix","fix","fix","fixn","fixn","fixn","fixn","fixlat","fixlat","fixlat","fixlat"), gazed=c("gaze","gaze", "nongaze", "nongaze"), stat=c("mean","se"), measure=c(0.08,.01,.07,.01,5.89,.37,5.24,.34,3588,133,4008,166)) # free = person
# ANOVA Fixations characteristics for joint attention
## 2 (Group) x 2 (Gaze) ANOVA
icond <- gl(2,1,labels=c("cued","uncued")) # within-factor
idata <- data.frame(icond)
for (st in seq(7,16,4)) { # Variables 7:16, every 4th: fix.gaze and fix.nogaze; fixn.gaze and ...
carmod <- lm(as.matrix(df.w.et[,st:(st+1)]) ~ df.w.et$group)
#print(colnames(df.w.et[,st:(st+1)]))
#print(Anova(carmod, idata=idata, idesign=~icond, type="III"))
assign(paste0("anova.",colnames(df.w.et)[st]), Anova(carmod, idata=idata, idesign=~icond, type="III"))
assign(paste0("apa.anova.",colnames(df.w.et)[st]), apa_print(Anova(carmod, idata=idata, idesign=~icond, type="III"), correction="GG", mse = FALSE))
}
rm(carmod, idata, icond, st)
dscr.sac.rpl <- df.w.et %>%
group_by(group) %>%
summarise_at(vars(sac.pgaze:sac.bnongaze), funs(mean,sd,se=sd(.)/sqrt(n()))) %>% # mit den funs() die variablen vars(von:bis) berechnen
gather(key, measure, sac.pgaze_mean:sac.bnongaze_se) %>% # ins longformat
mutate(stat = as.factor(map(strsplit(key,"[[:punct:]]"), ~.x[3]) %>% unlist()),
area = map(strsplit(key,"[[:punct:]]"), ~.x[2]) %>% unlist(),
area = as.factor(substring(area,1,1)),
gazed = map(strsplit(key,"[[:punct:]]"), ~.x[2]) %>% unlist(),
gazed = as.factor(substring(gazed,2)),
key = as.factor("replication")) %>% #rausnehmen, zur kontrolle, ob alles passt, was oben läuft.
select(-measure, everything()) %>% # neusortieren der variablen
select(key, everything())
dscr.sac.zwckl <- data.frame(key=c("zwickel","zwickel"),group=c("free", "free"),gazed=c("gaze", "gaze", "nongaze", "nongaze"),stat=c("mean", "se"),measure=c(.14,0.01,.09,0.01)) # free = person
# Plots: Saccade data
'
farben <- c("blue","yellow")
ttxt <- c("Person","Face","Body")
for (i in 1:3) {
st <- (17:19)[i]
# Fixation density
m  <- cbind(apply(df.w.et[df.w.et$group=="free",c(st,st+3)],2,mean),
apply(df.w.et[df.w.et$group=="mem",c(st,st+3)],2,mean))
se <- cbind(apply(df.w.et[df.w.et$group=="free",c(st,st+3)],2,sd)/sqrt(sum(df.w.et$group=="free")),
apply(df.w.et[df.w.et$group=="mem",c(st,st+3)],2,sd)/sqrt(sum(df.w.et$group=="mem")))
yrng <- c(0,max(m+se))
x <- barplot(m,beside=TRUE,col=farben,ylim=yrng,xlab="",ylab="% of total fixation time")
arrows(x,m-se,x,m+se,length=0.03,angle=90,code=3,col="black")
axis(1,apply(x,2,mean),c("Free viewing","Explicit encoding"),tick=FALSE)
title(ttxt[i])
}
legend(max(x),max(yrng),c("Cued","Uncued"),fill=farben,xjust=1,yjust=1)
rm(m, se, yrng, x, st, farben, ttxt, i)
'
# ANOVA Saccades
## 2 (Group) x 2 (Gaze) ANOVA
icond <- gl(2,1,labels=c("cued","uncued")) # within-factor
idata <- data.frame(icond)
for (st in 17:19) {
carmod <- lm(as.matrix(df.w.et[,c(st,(st+3))]) ~ df.w.et$group)
#print(colnames(df.w.et[,c(st,(st+3))]))
#print(Anova(carmod, idata=idata, idesign=~icond, type="III"))
assign(paste0("anova.",colnames(df.w.et)[st]), Anova(carmod, idata=idata, idesign=~icond, type="III"))
assign(paste0("apa.anova.",colnames(df.w.et)[st]), apa_print(Anova(carmod, idata=idata, idesign=~icond, type="III"), correction="GG", mse = FALSE))
}
rm(carmod, idata, icond, st)
# Recalled items
# 2 (Condition) x 2 (Gaze) ANOVA (auf erinnerte Details)
imem <- gl(2,1,labels=c("cued","uncued"))
idata <- data.frame(imem)
# Car
carmod <- lm(as.matrix(df.w.mem[,3:4]) ~ df.w.mem$bed)
# print(colnames(df.w.mem[c(3,4)]))
#print(Anova(carmod, idata=idata, idesign=~imem, type="III"))
anova.mem <- Anova(carmod, idata=idata, idesign=~imem, type="III")
apa.anova.mem <- apa_print(Anova(carmod, idata=idata, idesign=~imem, type="III"), correction="GG", mse = FALSE)
dscr.mem <- df.w.mem %>% summarise(mean(memgaze), sd(memgaze), mean(memnogaze), sd(memnogaze))
dscr.mem.group <- df.w.mem %>% group_by(bed) %>% summarise(mean(memgaze), sd(memgaze), mean(memnogaze), sd(memnogaze))
rm(imem, idata, carmod)
# Descriptives for fixation chacracteristics for social attention
dscr.fixsoc <- df.w.et %>% summarise(mean(fix.face), sd(fix.face), mean(fix.body), sd(fix.body), mean(fixn.face), sd(fixn.face), mean(fixn.body), sd(fixn.body), mean(fixlat.face), sd(fixlat.face), mean(fixlat.body), sd(fixlat.body))
dscr.fixsoc.group <- df.w.et %>% group_by(group) %>% summarise(mean(fix.face), sd(fix.face), mean(fix.body), sd(fix.body), mean(fixn.face), sd(fixn.face), mean(fixn.body), sd(fixn.body), mean(fixlat.face), sd(fixlat.face), mean(fixlat.body), sd(fixlat.body))
# ANOVA Fixations characteristics
## 2 (Group) x 2 (Face/Body) ANOVA
icond <- gl(2,1,labels=c("head","body")) # within-factor
idata <- data.frame(icond)
for (st in seq(5,16,4)) { # Variables 5:16, every 4th: fix.face and fix.noface; fixn.face and ...
carmod <- lm(as.matrix(df.w.et[,st:(st+1)]) ~ df.w.et$group)
#print(Anova(carmod, idata=idata, idesign=~icond, type="III"))
assign(paste0("anova.",colnames(df.w.et)[st]), Anova(carmod, idata=idata, idesign=~icond, type="III"))
assign(paste0("apa.anova.",colnames(df.w.et)[st]), apa_print(Anova(carmod, idata=idata, idesign=~icond, type="III"), correction="GG", mse = FALSE))
}
rm(carmod, idata, icond, st)
# plots
plot.face.free_vs_mem <- df.l.et %>%
filter(fixations=="fix" & region=="face") %>%
ggboxplot(x = "fixations", y = "value",
fill = "group", palette =c("#00AFBB", "#E7B800", "#FC4E07"),
add = "jitter", shape = "group") #+
#stat_compare_means()
plot.face.free_vs_mem
install.packages(c("broom", "car", "cowplot", "devtools", "ggpubr", "hms", "jmvcore", "Matrix", "multcomp", "openssl", "raster", "RcppEigen", "reticulate", "rmarkdown", "stringi", "tidyselect", "tidyverse"))
install.packages(c("broom", "car", "cowplot", "devtools", "ggpubr", "hms", "jmvcore", "Matrix", "multcomp", "openssl", "raster", "RcppEigen", "reticulate", "rmarkdown", "stringi", "tidyselect", "tidyverse"))
install.packages(c("broom", "car", "cowplot", "devtools", "ggpubr", "hms", "jmvcore", "Matrix", "multcomp", "openssl", "raster", "RcppEigen", "reticulate", "rmarkdown", "stringi", "tidyselect", "tidyverse"))
install.packages(c("broom", "car", "cowplot", "devtools", "ggpubr", "hms", "jmvcore", "Matrix", "multcomp", "openssl", "raster", "RcppEigen", "reticulate", "rmarkdown", "stringi", "tidyselect", "tidyverse"))
install.packages(c("broom", "car", "cowplot", "devtools", "ggpubr", "hms", "jmvcore", "Matrix", "multcomp", "openssl", "raster", "RcppEigen", "reticulate", "rmarkdown", "stringi", "tidyselect", "tidyverse"))
install.packages(c("broom", "car", "cowplot", "devtools", "ggpubr", "hms", "jmvcore", "Matrix", "multcomp", "openssl", "raster", "RcppEigen", "reticulate", "rmarkdown", "stringi", "tidyselect", "tidyverse"))
install.packages(c("broom", "car", "cowplot", "devtools", "ggpubr", "hms", "jmvcore", "Matrix", "multcomp", "openssl", "raster", "RcppEigen", "reticulate", "rmarkdown", "stringi", "tidyselect", "tidyverse"))
install.packages(c("broom", "car", "cowplot", "devtools", "ggpubr", "hms", "jmvcore", "Matrix", "multcomp", "openssl", "raster", "RcppEigen", "reticulate", "rmarkdown", "stringi", "tidyselect", "tidyverse"))
install.packages(c("broom", "car", "cowplot", "devtools", "ggpubr", "hms", "jmvcore", "Matrix", "multcomp", "openssl", "raster", "RcppEigen", "reticulate", "rmarkdown", "stringi", "tidyselect", "tidyverse"))
install.packages(c("broom", "car", "cowplot", "devtools", "ggpubr", "hms", "jmvcore", "Matrix", "multcomp", "openssl", "raster", "RcppEigen", "reticulate", "rmarkdown", "stringi", "tidyselect", "tidyverse"))
?lm()
?Anova()
??Anova()
